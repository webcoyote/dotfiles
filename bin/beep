#!/usr/bin/env bash
set -Eeuo pipefail
trap 'echo "${BASH_SOURCE[0]}: line $LINENO: $BASH_COMMAND: exitcode $?"' ERR

# Clean up name by replacing hyphens and underscores with spaces
clean_name() {
    local name="$1"
    echo "$name" | sed 's/[-_]/ /g'
}

get_git_repo() {
    local repo=""
    if repo=$(git rev-parse --show-toplevel 2>/dev/null); then
        clean_name "$(basename "$repo")"
    else
        clean_name "$(basename "$(pwd)")"
    fi
}

get_git_branch() {
    local branch=""
    if branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null); then
        clean_name "$branch"
    else
        echo ""
    fi
}

# Generate a random completion message
generate_completion_message() {
    local project branch branch_text

    # Get project and branch information
    project=$(get_git_repo)
    branch=$(get_git_branch)

    # Add branch text if not on main
    if [[ -n "$branch" && "$branch" != "main" ]]; then
        branch_text=" on branch $branch"
    else
        branch_text=""
    fi

    # Random completion messages
    local messages=(
        "${project}${branch_text} is done!"
        "${project}${branch_text} finished!"
        "Completed ${project}${branch_text}!"
        "${project}${branch_text} is ready!"
    )

    # Select a random message
    local random_index=$((RANDOM % ${#messages[@]}))
    echo "${messages[$random_index]}"
}

# Speak text using macOS 'say' command
speak_text() {
    local text="$1"

    # Check if 'say' command is available (macOS)
    if ! command -v say &> /dev/null; then
        echo "❌ 'say' command not found. Text-to-speech not available." >&2
        return 1
    fi

    # Speak the text with a moderate rate
    say -r 200 "$text"
}

# Display notification using macOS osascript
display_notification() {
    local message="$1"
    local title="${2:-Done}"

    # Check if 'osascript' command is available (macOS)
    if ! command -v osascript &> /dev/null; then
        echo "❌ 'osascript' command not found. Notifications not available." >&2
        return 1
    fi

    # Display the notification
    osascript -e "display notification \"$message\" with title \"$title\""
}

main() {
    local message
    message=$(generate_completion_message)
    display_notification "$message" "Ready"
    speak_text "$message"
}

main "$@"
